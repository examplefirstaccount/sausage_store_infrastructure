server:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
    - prometheus.local
    paths:
    - /
    pathType: Prefix
  resources:
    limits:
      memory: 512Mi
      cpu: 500m

alertmanager:
  enabled: true

  persistence:
    size: 2Gi

  podSecurityContext:
    runAsUser: 65534
    runAsNonRoot: true
    runAsGroup: 65534
    fsGroup: 65534

  config:
    enabled: true
    global:
      resolve_timeout: 1m
    route:
      group_wait: 10s
      group_interval: 30s
      repeat_interval: 30m
      receiver: "telegram"
      routes:
      - receiver: "telegram"
        group_wait: 10s
        match_re:
          severity: critical|warning
        continue: true
    receivers:
    - name: "telegram"
      telegram_configs:
      - send_resolved: true
        bot_token: 7659472996:AAFvXeLIijPOWN_6Oa5VHCfYKEsiXESwn6k
        api_url: https://api.telegram.org
        chat_id: 6640514132
        parse_mode: ""
        message: "{{ range .Alerts }}{{ .Annotations.description }}\n{{ end }}"

serverFiles:
  alerting_rules.yml:
    groups:
    - name: Sausage store rules
      rules:
      - alert: InstanceDown
        expr: up{app="backend"} == 0
        for: 1m
        labels:
          severity: critical
          project: "sausage_store"
          component: "Backend"
      - alert: Code500
        expr: http_server_requests_seconds_count{status="500", app="backend"} > 0
        labels:
          severity: critical
          project: "sausage_store"
          component: "Backend"
      - alert: More then 100ms latency
        expr: histogram_quantile(0.95, rate(http_server_requests_seconds_bucket{status=~"2..",method="POST",uri="/api/orders"}[5m]) > 0.1)
        labels:
          severity: critical
          project: "sausage_store"
          component: "Backend"
      - alert: error CODE (3xx,4xx,5xx)
        expr: rate(http_server_requests_seconds_count{uri="/actuator/prometheus", status!~"2.."}[1m]) > 0
        labels:
          severity: critical
          project: "sausage_store"
          component: "Backend"

  recording_rules.yml: {}

  prometheus.yml:
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    scrape_configs:
    - job_name: kubernetes-pods
      scrape_interval: 10s
      scrape_timeout: 10s
      honor_labels: true
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - default # Your app namespace, if needed. Mine is in default namespace 
      relabel_configs:
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
        action: keep
        regex: true
      - source_labels: [ __meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port ]
        regex: (.+);(.+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
        regex: (.+)
        target_label: __metrics_path__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [ __meta_kubernetes_namespace ]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [ __meta_kubernetes_pod_name ]
        action: replace
        target_label: kubernetes_pod_name
