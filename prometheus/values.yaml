server:
  # extraArgs:
  #   log.level: debug
  # logLevel: debug
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
    - prometheus.local
    paths:
    - /
    pathType: Prefix
  # service:
  #   type: ClusterIP
  #   port: 9090
  # persistentVolume:
  #   enabled: false

  # resources:
  #   limits:
  #     memory: 1Gi
  #     cpu: 1

  # serverFiles:
  #   prometheus.yml:
  #     global:
  #       scrape_interval: 10s
  #       scrape_timeout: 10s
  #     # rule_files:
  #     # - "/etc/config/sausage-store-rules.yaml"
  #     scrape_configs:
  #     - job_name: kubernetes-pods
  #       kubernetes_sd_configs:
  #       - role: pod
  #         namespaces:
  #           names:
  #           - monitoring
  #       relabel_configs:
  #       - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
  #         action: keep
  #         regex: true
  #       - source_labels: [ __meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port ]
  #         regex: (.+);(.+)
  #         replacement: $1:$2
  #         target_label: __address__
  #       - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
  #         regex: (.+)
  #         target_label: __metrics_path__
  #       - action: labelmap
  #         regex: __meta_kubernetes_pod_label_(.+)
  #       - source_labels: [ __meta_kubernetes_namespace ]
  #         action: replace
  #         target_label: kubernetes_namespace
  #       - source_labels: [ __meta_kubernetes_pod_name ]
  #         action: replace
  #         target_label: kubernetes_pod_name
  # alerts:
  #   sausage-store-rules.yaml: |-
  #     groups:
  #       - name: Sausage store rules
  #         rules:
  #           - alert: InstanceDown
  #             expr: up{app="backend"} == 0
  #             for: 1m
  #             labels:
  #               severity: critical
  #               project: "sausage_store"
  #               component: "Backend"
